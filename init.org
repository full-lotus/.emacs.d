:PROPERTIES:
:header-args: :comments both :noweb yes :mkdirp yes
:END:

* Purpose of this Emacs config
This config aims to maximize Clojure programmer productivity through:

1. /Making Emacs easy to learn on the go/
   Without modes like <<<which-key>>>, <<<command-log>>>, <<<<ivy>>>>, etc -
   Emacs is a huge pain for new users.

2. /Short hotkeys for most often used functionality/
   For example, 'C-o'/'M-o' for ~other-window/other-frame~. Mode <<<keyfreq>>>
   helps to find commands which need short hotkeys.

3. /Being minimalistic/
   I use Emacs as a tool, not a hobby. I customize things to get them out of
   the way of reaching deep concentration, not to enjoy shiny toys.

4. /<<<Literate programming>>> with <<<polymode>>>/
   To minimize context/abstraction switching overhead. Plus, figuring out
   *why* code was written is a huge waste of time and mental energy.

5. /Being dead obvious *why* some things were customized/
   In other words, the config itself is a Literate Program


* Customize and custom.el
#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/customization-api-tweaks.tangled.el")
#+end_src

** Sync init.el changes to customize
I use Emacs Customize GUI, because it's convenient. I want to see actual info
there, that's why I use this fn instead of ~setq~

#+begin_src elisp :tangle ~/.emacs.d/elisp/customization-api-tweaks.tangled.el
(defun setq-mark-as-customized (&rest var-val-pairs)
  "Set variable value and make sure Customize registers this change. Use
instead of setq, to avoid confusion in Customize interface"
  (while var-val-pairs
    (let ((var (pop var-val-pairs))
          (val (pop var-val-pairs)))
      (set var val)
      (put var 'customized-value
           (list (custom-quote (symbol-value var)))))))
#+end_src

** Separate custom.el from init.el
#+begin_src elisp :tangle ~/.emacs.d/elisp/customization-api-tweaks.tangled.el
;; separate custom-file because it's a mess, with everything in one place
(setq-mark-as-customized 'custom-file
			 "~/.emacs.d/elisp/customizations-generated-by-emacs.el")

;; we are loading at the top of init.el, to set custom variables nice and
;; separate, grouping relevant settings together
(load custom-file)
#+end_src


* Package management
#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/package-management.tangled.el")
#+end_src

** Set URLs from which we search and download packages
#+begin_src elisp :tangle ~/.emacs.d/elisp/package-management.tangled.el
(setq-mark-as-customized
 'package-archives
 '(("gnu" . "http://elpa.gnu.org/packages/")
   ("non-gnu" . "https://elpa.nongnu.org/nongnu/")
   ("melpa" . "http://melpa.org/packages/")))
#+end_src

** Init package.el, fetch available packages from URLs
#+begin_src elisp :tangle ~/.emacs.d/elisp/package-management.tangled.el
;; start package system (package.el, package dirs, available packages cache)
(package-initialize)

;; fetch the list of packages available, must run package-initialize first
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

** Install and load all non-default packages
#+begin_src elisp :tangle ~/.emacs.d/elisp/package-management.tangled.el
;; add non-default packages that we need
(custom-set-variables
 '(package-selected-packages
   '(async bm casual-avy cider clojure-mode command-log-mode counsel
	   dired-ranger flycheck flycheck-clj-kondo ivy ivy-rich
	   keyfreq magit ob-async ob-clojurescript openwith org-tidy
	   pcre2el poly-org posframe puni rainbow-delimiters smex
	   treemacs treemacs-all-the-icons wgrep yasnippet)))

;; install all non-default packages
(dolist (pkg package-selected-packages)
  (unless (package-installed-p pkg)
    (package-install pkg)))

;; require all non-default packages
(dolist (pkg package-selected-packages)
  (require pkg nil 'noerror))
#+end_src


* General global settings
#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/global-settings.tangled.el")
#+end_src

** Emacs startup/exit
#+begin_src elisp :tangle ~/.emacs.d/elisp/global-settings.tangled.el
(setq-mark-as-customized
 ;; Don't display load average
 'display-time-default-load-average nil

 ;; Disable start-up screen
 'inhibit-startup-screen t

 ;; Empty the initial *scratch* buffer
 'initial-scratch-message ""

 ;; Confirm before exiting Emacs
 'confirm-kill-emacs 'yes-or-no-p
 )
#+end_src

** Elisp
#+begin_src elisp :tangle ~/.emacs.d/elisp/global-settings.tangled.el
;; the dir with elisp files to be loaded
(add-to-list 'load-path "~/.emacs.d/elisp/")

(setq-mark-as-customized
 ;; Silence warnings for redefinition
 'ad-redefinition-action 'accept
 )

(defmacro comment (&rest body)
  "A simple way to comment out code in Emacs Lisp."
  nil)
#+end_src

** Use SSH through daemon launched on startup
#+begin_src elisp :tangle ~/.emacs.d/elisp/global-settings.tangled.el
(setenv "SSH_AUTH_SOCK" (concat (getenv "XDG_RUNTIME_DIR") "/ssh-agent.socket"))
#+end_src

** Sound
#+begin_src elisp :tangle ~/.emacs.d/elisp/global-settings.tangled.el
;; use screen flash instead of annoying error sound
(setq-mark-as-customized
 'visible-bell t
 )
#+end_src

** Commands
*** History
#+begin_src elisp :tangle ~/.emacs.d/elisp/global-settings.tangled.el
;; save command history, e. g. for execute-extended-command
(savehist-mode 1)

;; use smex to show command history in counsel-M-x
(smex-initialize)
(setq-mark-as-customized 'smex-history-use-recent-first t)
#+end_src

*** Easier yes/no
#+begin_src elisp :tangle ~/.emacs.d/elisp/global-settings.tangled.el
;; Replace yes/no prompts with y/n
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Easy (1 button) command repeat
#+begin_src elisp :tangle ~/.emacs.d/elisp/global-settings.tangled.el
;; make some multi-chord commands repeatable with 1 key press
;; for example - repeat C-x <LEFT> (previous-buffer) with just <LEFT>
(repeat-mode 1)
#+end_src

** Emacs temporary files
#+begin_src elisp :tangle ~/.emacs.d/elisp/global-settings.tangled.el
;; stop creating backup~ files
(setq-mark-as-customized 'make-backup-files nil)

;; stop creating #autosave# files
(setq-mark-as-customized 'auto-save-default nil)

;; no lockfiles
(setq-mark-as-customized 'create-lockfiles nil)

;; Don't clutter main Emacs folder with session. files
(defun emacs-session-filename (session-id)
  "Return the file name of the session file for SESSION-ID."
  (expand-file-name (concat "session." session-id)
                    "~/.emacs.d/sessions/"))
#+end_src


* Text
#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/text-settings.tangled.el")
#+end_src

** Navigation
*** Avy
#+begin_src elisp :tangle ~/.emacs.d/elisp/text-settings.tangled.el
(keymap-global-set "M-SPC" #'avy-goto-word-0)
#+end_src

*** Bookmarks (bm package)
#+begin_src elisp :tangle ~/.emacs.d/elisp/text-settings.tangled.el
(declare-function poly-org-mode? "org-mode.tangled")

(defun pm--org-reveal-inside-source-block ()
  "Temporarily switch back to org-mode, to be able to do proper unfolding"
  (interactive)
  (let ((pm? (and (poly-org-mode?) (not (eq 'org-mode major-mode))))
	(post-command-hook nil)
	(pm--move-overlays (lambda ()))
	(curr-point (point)))
    (when pm?
      ;; switch to org-mode without breaking polymode
      (goto-char (point-min))
      (polymode-post-command)
      (goto-char curr-point))

    ;; now, in org-mode, properly find parent heading and unfold it
    (org-up-element)
    (org-fold-show-subtree)

    ;; go back to original point and restore the major mode
    (goto-char curr-point)
    (when pm?
      (polymode-post-command))))

(use-package bm
  :ensure t
  :demand t

  :init
  ;; restore on load (even before you require bm)
  (setq bm-restore-repository-on-load t)

  :config
  ;; Allow cross-buffer 'next'
  (setq bm-cycle-all-buffers t)

  ;; where to store persistant files
  (setq bm-repository-file "~/.emacs.d/bm-repository")

  ;; save bookmarks
  (setq-default bm-buffer-persistence t)

  ;; Loading the repository from file when on start up.
  (add-hook 'after-init-hook 'bm-repository-load)

  ;; Saving bookmarks
  (add-hook 'kill-buffer-hook #'bm-buffer-save)

  ;; Saving the repository to file when on exit.
  ;; kill-buffer-hook is not called when Emacs is killed, so we
  ;; must save all bookmarks first.
  (add-hook 'kill-emacs-hook #'(lambda nil
                                 (bm-buffer-save-all)
                                 (bm-repository-save)))

  ;; The `after-save-hook' is not necessary to use to achieve persistence,
  ;; but it makes the bookmark data in repository more in sync with the file
  ;; state.
  (add-hook 'after-save-hook #'bm-buffer-save)

  ;; Restoring bookmarks
  (add-hook 'find-file-hooks   #'bm-buffer-restore)
  (add-hook 'after-revert-hook #'bm-buffer-restore)

  ;; The `after-revert-hook' is not necessary to use to achieve persistence,
  ;; but it makes the bookmark data in repository more in sync with the file
  ;; state. This hook might cause trouble when using packages
  ;; that automatically reverts the buffer (like vc after a check-in).
  ;; This can easily be avoided if the package provides a hook that is
  ;; called before the buffer is reverted (like `vc-before-checkin-hook').
  ;; Then new bookmarks can be saved before the buffer is reverted.
  ;; Make sure bookmarks is saved before check-in (and revert-buffer)
  (add-hook 'before-revert-hook #'bm-buffer-save)

  ;; org-mode expand the region containing a bookmark
  ;; (add-hook 'bm-after-goto-hook 'org-bookmark-jump-unhide)
  (add-hook 'bm-after-goto-hook 'pm--org-reveal-inside-source-block)

  ;; the markers on the right fringe instead of the left
  (setq bm-highlight-style 'bm-highlight-line-and-fringe)
  (setq bm-marker 'bm-marker-right)

  (bind-key* (kbd "<f2>") 'bm-next)
  (bind-key* (kbd "S-<f2>") 'bm-previous)
  (bind-key* (kbd "C-<f2>") 'bm-toggle))
#+end_src

** Display
#+begin_src elisp :tangle ~/.emacs.d/elisp/text-settings.tangled.el
;; blinking cursor is annoying
(blink-cursor-mode -1)

;; wrap lines at word boundaries, so that they always fit current window
(global-visual-line-mode 1)

;; Default to utf-8 encoding
(set-default-coding-systems 'utf-8)

(setq-mark-as-customized
 ;; to see when a line is longer than 80 symbols
 'display-fill-column-indicator-column 80

 ;; set width for automatic line breaks
 'fill-column 80

 ;; Add left and right margins
 'left-margin-width 1 'right-margin-width 1

 ;; don't display line numbers at their beginning
 ;; 'display-line-numbers-type nil

 ;; show column number in minibuffer
 'column-number-mode t

 ;; Display trailing whitespaces
 'show-trailing-whitespace nil

 ;; Set width for tabs
 'tab-width 4

 ;; Stretch cursor to the glyph width
 'x-stretch-cursor t
 )

(global-display-fill-column-indicator-mode t)
#+end_src

** Editing
#+begin_src elisp :tangle ~/.emacs.d/elisp/text-settings.tangled.el
;; make undo hotkey familiar
(global-set-key (kbd "C-z") 'undo)

(setq-mark-as-customized

 ;; Stop using tabs to indent
 'indent-tabs-mode nil

 ;; End a sentence after a dot and a space
 'sentence-end-double-space nil
 )

;; delete all trailing whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

*** Copy/paste
#+begin_src elisp :tangle ~/.emacs.d/elisp/text-settings.tangled.el
;; delete active region on yanking (paste)
(cua-mode 1)

(setq-mark-as-customized
 ;; save kill-ring between emacs session, up to 20 entries
 'savehist-additional-variables '(kill-ring)
 'kill-ring-max 20

 ;; saves OS clipboard content before kill, to prevent overwriting it
 'save-interprogram-paste-before-kill t

 ;; sync system's and Emacs' clipboard
 'select-enable-clipboard t

 ;; Yank at point rather than pointer
 'mouse-yank-at-point t
 )
#+end_src

** Syncing with filesystem (reverting)
#+begin_src elisp :tangle ~/.emacs.d/elisp/text-settings.tangled.el
;; The auto-revert setting is enabled because tangle / detangle for literate
;; programming will change contents of files. If the file is open in a buffer,
;; I want it to automatically show the change without asking me every time.
(global-auto-revert-mode t)
#+end_src


* Frame/window/buffer configuration
#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/frame-window-buffer-settings.tangled.el")
#+end_src

** Display
*** Hide
#+begin_src elisp :tangle ~/.emacs.d/elisp/frame-window-buffer-settings.tangled.el
;; hide useless title bar, but allow resizing
(add-to-list 'default-frame-alist '(undecorated . t))
(add-to-list 'default-frame-alist '(drag-internal-border . 1))
(add-to-list 'default-frame-alist '(internal-border-width . 5))

;; I don't use toolbar, and rarely menu-bar
(tool-bar-mode 0)
(menu-bar-mode 0)

(setq-mark-as-customized
 ;; don't display time in frames
 'display-time-mode 0

 ;; don't use sRGB colors
 'ns-use-srgb-colorspace nil
 )
#+end_src

*** Splitting/resizing
#+begin_src elisp :tangle ~/.emacs.d/elisp/frame-window-buffer-settings.tangled.el
(setq-mark-as-customized
 ;; Disable vertical window splitting
 'split-height-threshold nil

 ;; Allow horizontal splitting, if there's at least 1 column in the buffer
 'split-width-threshold 1

 ;; Resize windows proportionally
 'window-combination-resize t
 )
#+end_src

*** Creating buffers and choosing how to display them
#+begin_src elisp :tangle ~/.emacs.d/elisp/frame-window-buffer-settings.tangled.el
(custom-set-variables
 '(winner-mode t))

(defun my/switch-buffer-here ()
  "Switch buffer in the current window, ignoring `display-buffer-alist`."
  (interactive)
  (let ((display-buffer-alist nil)) ;; Temporarily disable display-buffer-alist
    (call-interactively 'switch-to-buffer)))

(global-set-key (kbd "C-x b") #'my/switch-buffer-here)

(setq-mark-as-customized
 ;; Uniquify buffer names
 'uniquify-buffer-name-style 'forward

 ;; Focus new help windows when opened
 'help-window-select t

 ;; don't open new buffers when navigating dirs in dired
 'dired-kill-when-opening-new-dired-buffer t

 'display-buffer-alist
 '(;; without this, transient buffer breaks window layout
   ;; it happens because of conflicts with lower settings
   (".*transient.*"
    (display-buffer-in-side-window)
    (side . bottom)
    (inhibit-same-window . t)
    (window-parameters (no-other-window . t)))

   ;; treemacs is a file navigator, typically glued to the left screen side
   ("\\*Treemacs-.*?" (display-buffer-in-direction) (direction . left))

   ;; open in the same window
   ((or . ((major-mode . help-mode)
	   (major-mode . Custom-mode)
	   (major-mode . dired-mode)
	   (major-mode . org-mode)
	   (major-mode . clojure-mode)
	   (major-mode . cider-repl-mode)
	   "\\*cider-error.*\\*"
	   "\\*Org Src.*\\*"))
    (display-buffer-same-window)
    (inhibit-same-window . nil)
    (inhibit-switch-frame . t))

   ;; open in another window - the default behavior
   ((or . ((major-mode . ivy-occur-grep-mode)
	   "\\*cider-test-report\\*"
	   ".*"))
    (display-buffer-use-least-recent-window)
    (inhibit-switch-frame . t))
   )
 )
#+end_src

** Scrolling
#+begin_src elisp :tangle ~/.emacs.d/elisp/frame-window-buffer-settings.tangled.el
(scroll-bar-mode 1) ;; enable vertical scroll bars
(horizontal-scroll-bar-mode 1) ;; enable horizontal scroll bars

(setq-mark-as-customized
 ;; Lighten vertical scroll
 'auto-window-vscroll nil

 'scroll-step 1
 'scroll-conservatively 10000
 )
#+end_src

** Save/load frame configuration on exit/start
#+begin_src elisp :tangle ~/.emacs.d/elisp/frame-window-buffer-settings.tangled.el
(desktop-save-mode t)
#+end_src

** Navigation
*** Buffer/window/frame switching, burying, treemacs
#+begin_src elisp :tangle ~/.emacs.d/elisp/frame-window-buffer-settings.tangled.el
(bind-key* (kbd "C-o") 'other-window)
(bind-key* (kbd "M-o") 'other-frame)
(global-set-key (kbd "C-S-b") 'treemacs)
(global-set-key (kbd "C-x w") 'bury-buffer)

(bind-key* (kbd "s-b") 'my/switch-buffer-here)
(bind-key* (kbd "s-k") 'kill-buffer)
#+end_src

*** Tabs
Couldn't find desirable tab functionality which would allow me to tab through
different parts on 1 file, having a set of tabs for each window.

- tab-line-mode/centaur-tabs aren't suitable because of indirect buffer bugs
  and because they don't open the same buffer in different tabs of the same
  window
- tab-bar-mode works, but doesn't have window-specific tabs

#+begin_src elisp :tangle ~/.emacs.d/elisp/frame-window-buffer-settings.tangled.el
(tab-bar-mode t)

(global-set-key (kbd "C-x C-<left>") 'tab-bar-switch-to-prev-tab)
(global-set-key (kbd "C-x C-<right>") 'tab-bar-switch-to-next-tab)
#+end_src


* Command/code completion
#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/completions.tangled.el")
#+end_src

** which-key mode
Shows completion options, after you start pressing hotkeys

#+begin_src elisp :tangle ~/.emacs.d/elisp/completions.tangled.el
(which-key-mode 1)
#+end_src

** keyfreq mode
Records how much times a command was used. Useful for optimizing hotkeys

#+begin_src elisp :tangle ~/.emacs.d/elisp/completions.tangled.el
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)

(setq-mark-as-customized
 'keyfreq-excluded-commands
 '(self-insert-command
   forward-char
   backward-char
   previous-line
   next-line))
#+end_src

** Enable ivy and counsel modes
#+begin_src elisp :tangle ~/.emacs.d/elisp/command-and-code-completion.tangled.el
;; use Ivy + Counsel + Swiper for better completion/search
;; settings taken from here https://github.com/abo-abo/swiper
(ivy-mode)
(ivy-rich-mode)
(counsel-mode)
(setq-mark-as-customized 'ivy-use-virtual-buffers t)
(setq-mark-as-customized 'enable-recursive-minibuffers t)
#+end_src

*** Disable icomplete mode when calling ivy-read, to fix a conflict
#+begin_src elisp :tangle ~/.emacs.d/elisp/command-and-code-completion.tangled.el
;; disable icomplete to fix error:
;; Error in post-command-hook (icomplete-post-command-hook):
;; (wrong-number-of-arguments #<subr counsel-ag-function> 3)
(defun ivy-icomplete (f &rest r)
  (icomplete-mode -1)
  (unwind-protect
      (apply f r)
    (icomplete-mode 1)))

(advice-add 'ivy-read :around #'ivy-icomplete)
#+end_src

*** Fix counsel-rg not displaying errors properly
#+begin_src elisp :tangle ~/.emacs.d/elisp/command-and-code-completion.tangled.el
(with-eval-after-load 'counsel
  (advice-add
   'counsel-rg
   :around
   (lambda (func &rest args)
     (cl-flet ((filter-func (code) (if (= code 2) 0 code)))
       (unwind-protect
           (progn (advice-add 'process-exit-status :filter-return #'filter-func)
                  (apply func args))
         (advice-remove 'process-exit-status #'filter-func))))))
#+end_src

** Customize ivy matching behavior
#+begin_src elisp :tangle ~/.emacs.d/elisp/command-and-code-completion.tangled.el
;; Enable orderless matching for execute-extended-command
(setq-mark-as-customized 'ivy-re-builders-alist
                         '((counsel-M-x . ivy--regex-ignore-order)
                           (t . ivy--regex-plus)))

;; Drop beginning-of-string anchor ^ from execute-extended-command
(with-eval-after-load 'ivy
  (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) ""))

;; allow selecting the prompt itself as command candidate
(setq-mark-as-customized 'ivy-use-selectable-prompt t)
#+end_src

** Add commands for searching the current symbol under cursor
#+begin_src elisp :tangle ~/.emacs.d/elisp/command-and-code-completion.tangled.el
(defun regex-fn-ivy-thing-at-point (regex-fn)
  "Run `counsel-git-grep` with ivy-thing-at-point as the initial input."
  (interactive)
  (let ((thing (ivy-thing-at-point)))
    (when (use-region-p)
      (deactivate-mark))
    (funcall regex-fn (regexp-quote thing))))

(defun counsel-git-grep-ivy-thing-at-point ()
  (interactive)
  (regex-fn-ivy-thing-at-point 'counsel-git-grep))

(defun counsel-rg-ivy-thing-at-point ()
  (interactive)
  (regex-fn-ivy-thing-at-point 'counsel-rg))
#+end_src

** Configure ivy and counsel hotkeys
#+begin_src elisp :tangle ~/.emacs.d/elisp/command-and-code-completion.tangled.el
;; some of those hotkeys are redundant because of counsel-mode
;; but I'm not sure which I can drop, and to lazy to check one-by-one
(global-set-key (kbd "C-f") 'swiper)
(global-set-key (kbd "C-S-f") 'swiper-thing-at-point)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c J") 'counsel-git-grep-ivy-thing-at-point)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c r") 'counsel-rg)
(global-set-key (kbd "C-c R") 'counsel-rg-ivy-thing-at-point)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src

** Code completion
#+begin_src elisp :tangle ~/.emacs.d/elisp/command-and-code-completion.tangled.el
;; Always show completions
(setq-mark-as-customized 'completion-auto-help 'always)

;; Auto-select *Completions* buffer
(setq-mark-as-customized 'completion-auto-select 'second-tab)

;; Make <TAB> invoke completions list, when code is already idented properly
(setq-mark-as-customized 'tab-always-indent 'complete)
#+end_src

** Snippets (yasnippet)
#+begin_src elisp :tangle ~/.emacs.d/elisp/completions.tangled.el
(setq-mark-as-customized 'yas-snippet-dirs '("~/.emacs.d/snippets/"))
(yas-global-mode 1)
#+end_src


* Improved text replace
Make search-and-replace across project work as convenient as in VS Code.

#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/improved-text-replace.tangled.el")
#+end_src

** Wgrep
#+begin_src elisp :tangle ~/.emacs.d/elisp/improved-text-replace.tangled.el
;; wgrep allows to convert ivy-occur buffer to editable, to get VS Code-like
;; search and replace experience
(use-package wgrep
  :ensure t
  :custom
  (wgrep-auto-save-buffer t)
  (wgrep-change-readonly-file t))
#+end_src

** Replace+.el
Allows to invoke replace fn with a search regex in the list of defaults.
The defaults are cycled in minibuffer with up/down arrows.

#+begin_src elisp :tangle ~/.emacs.d/elisp/improved-text-replace.tangled.el
(load "~/.emacs.d/elisp/replace+.el")

;; this prevents replace+ being limited to an active region
(setq-mark-as-customized 'search/replace-region-as-default-flag t)

(defun get-initial-input-for-replace ()
  nil)
(setq-mark-as-customized 'search/replace-default-fn
                         'get-initial-input-for-replace)

(defun query-replace-regexp-with-initial-input (input)
  (eval
   '(let ((original-fn (symbol-function 'initial-input-for-replace)))
      (fset 'get-initial-input-for-replace (lambda () (regexp-quote input)))
      (unwind-protect
          (call-interactively 'query-replace-regexp)
        (fset 'get-initial-input-for-replace original-fn)))
   t))
#+end_src

** Start replace with preview in one keystroke
#+begin_src elisp :tangle ~/.emacs.d/elisp/improved-text-replace.tangled.el
(defun rapid-replace (search-fn)
  "Opens up wgrep buffer with query-replace-regexp started"
  (interactive)
  (eval
   '(let* ((thing (ivy-thing-at-point))
           (search-str (read-string "Enter at least 3 chars to replace: " thing)))
      (run-at-time
       nil nil
       (lambda ()
         (run-at-time
          nil nil
          (lambda ()
            (run-at-time
             nil nil
             (lambda ()
               (query-replace-regexp-with-initial-input search-str)
               ))
            (ivy-wgrep-change-to-wgrep-mode)))
         (ivy-occur)))
      (funcall search-fn search-str))
   t))

(defun rapid-replace-in-git-repo ()
  (interactive)
  (rapid-replace 'counsel-git-grep))

(defun rapid-replace-ripgrep ()
  (interactive)
  (rapid-replace 'counsel-rg))

(global-set-key (kbd "C-S-h") 'rapid-replace-ripgrep)
#+end_src


* Programming
#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/programming-settings.tangled.el")
#+end_src

** Syntax checking
#+begin_src elisp :tangle ~/.emacs.d/elisp/programming-settings.tangled.el
;; check syntax globally
(global-flycheck-mode)
#+end_src

** Parenthesis config
*** Puni-mode
#+begin_src elisp :tangle ~/.emacs.d/elisp/programming-settings.tangled.el
;; toggle puni-mode manually
(global-set-key (kbd "M-P") 'puni-mode)

(puni-global-mode 1)

;; puni-mode doesn't have auto-pairing
(electric-pair-mode 1)

;; use sexp editing hotkeys from VS Code Calva, to which I am used to
(define-key puni-mode-map (kbd "C-<right>") 'puni-forward-sexp)
(define-key puni-mode-map (kbd "C-<left>") 'puni-backward-sexp)
(define-key puni-mode-map (kbd "C-M-.") 'puni-slurp-forward)
(define-key puni-mode-map (kbd "C-M-,") 'puni-barf-forward)
(define-key puni-mode-map (kbd "C-M->") 'puni-barf-backward)
(define-key puni-mode-map (kbd "C-M-<") 'puni-slurp-backward)
#+end_src

*** Display
#+begin_src elisp :tangle ~/.emacs.d/elisp/programming-settings.tangled.el
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; always highlight matching paren
(show-paren-mode 1)
#+end_src

** Clojure
*** CIDER
#+begin_src elisp :tangle ~/.emacs.d/elisp/programming-settings.tangled.el
(setq-mark-as-customized
 'nrepl-hide-special-buffers t
 'cider-repl-clear-help-banner t
 'cider-font-lock-dynamically '(macro core function var)
 'cider-popup-stacktraces nil
 'cider-repl-popup-stacktraces t
 'cider-repl-use-pretty-printing t
 'cider-repl-pop-to-buffer-on-connect nil
 'cider-repl-display-help-banner nil
 'cider-use-overlays nil
 ;; when using 2 poly-org buffers on the same file, tooltips cause point in
 ;; non-selected buffer to jump between source blocks
 'cider-use-tooltips nil
 )

;; enforce simple formatting style
;; I had issues with clojure-mode bugging out and not detecting macros
(setq-mark-as-customized
 'clojure-indent-style 'always-indent
 'clojure-indent-keyword-style 'always-indent
 'clojure-enable-indent-specs nil)

;; Allow cider-repl to be cleared with shortcut
(add-hook 'cider-repl-mode-hook
      '(lambda () (define-key cider-repl-mode-map (kbd "C-c M-b")
                              'cider-repl-clear-buffer)))

;; use CIDER in every Clojure buffer
(add-hook 'clojure-mode-hook #'cider-mode)
(add-hook 'clojurescript-mode-hook #'cider-mode)

(add-hook 'cider-mode-hook #'imenu-add-menubar-index)

;; I write tests in the same ns as source code, source and tests must be close
(setq-mark-as-customized 'cider-test-infer-test-ns (lambda (ns) ns))

;; use the same hotkeys as in VS Code Calva
(define-key cider-repl-mode-map [C-return] nil)
(define-key cider-mode-map [C-return] 'cider-eval-sexp-at-point)
(define-key cider-mode-map (kbd "M-<RET>") 'cider-eval-defun-at-point)
(define-key cider-repl-mode-map [C-return] 'cider-eval-sexp-at-point)
(define-key cider-repl-mode-map (kbd "M-<RET>") 'cider-eval-defun-at-point)
;; prevent conflict with CUA-mode
(define-key cua-global-keymap [C-return] nil)
#+end_src

**** Routing expressions to CLJ/CLJS REPL for evaluation
#+begin_src elisp :tangle ~/.emacs.d/elisp/programming-settings.tangled.el
(defun eval-last-sexp-in-specific-repl (repl-type)
  "Evaluate the last expression only in the 'clj or 'cljs REPL."
  (interactive)
  (let ((form (cider-last-sexp))
        (cljs-conn (cider-current-connection repl-type)))
    (when (and form cljs-conn)
      (nrepl-request:eval form
                          (cider-interactive-eval-handler)
                          cljs-conn))))

(defun eval-last-sexp-in-clj ()
  "Evaluate the last expression only in the Clojure (not CLJS) REPL."
  (interactive)
  (eval-last-sexp-in-specific-repl 'clj))

(defun eval-last-sexp-in-cljs ()
  "Evaluate the last expression only in the ClojureScript REPL."
  (interactive)
  (eval-last-sexp-in-specific-repl 'cljs))

(define-key cider-mode-map (kbd "C-M-<return>") 'eval-last-sexp-in-clj)
(define-key cider-mode-map (kbd "C-S-<return>") 'eval-last-sexp-in-cljs)
#+end_src

** CSS
#+begin_src elisp :tangle ~/.emacs.d/elisp/programming-settings.tangled.el
(setq-mark-as-customized 'css-indent-offset 2)
#+end_src


* Org-mode (literate programming)
#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/org-mode.tangled.el")
#+end_src

** Time-tracking
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
;; closing Emacs/buffers must not stop work clock
(setq-mark-as-customized 'org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+end_src

** Navigation
*** General
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
(bind-key* (kbd "<f8>") 'counsel-org-goto)

;; deeply nested headings with prefixes don't fit in 1 line
(setq-mark-as-customized 'ivy-truncate-lines nil)
#+end_src

*** Single-letter hotkeys
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
(setq-mark-as-customized 'org-use-speed-commands t)
#+end_src

** Initialization
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
  ;; (require 'org)

  (eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((clojure . t)
       (clojurescript . t)
       (emacs-lisp . t)
       (shell . t))))

  (setq-mark-as-customized
   'org-startup-folded nil

   ;; not sure how/why this variable was set, decided not to mess with it
   'org-modules '(ol-bbdb ol-bibtex ol-docview ol-doi ol-eww ol-gnus
  			ol-info ol-irc ol-mhe ol-rmail org-tempo ol-w3m)

   ;; protection of overlay messes up editing sometimes
   'org-tidy-protect-overlay nil)
#+end_src

** Display
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
;; background colors are changed to be consistent with src-blocks in org-mode
(setq-mark-as-customized
 'org-src-fontify-natively t
 'org-src-block-faces '(("elisp" (:background "lavender"))
			("emacs-lisp" (:background "lavender"))
			("clojure" (:background "lavender"))
			("clojurescript" (:background "lavender"))
			("clojurec" (:background "lavender"))))
#+end_src

*** General
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
(setq-mark-as-customized
 ;; open src blocks in the same window as parent .org file
 'org-src-window-setup 'current-window

 'org-hide-leading-stars t

 ;; do not display inline images when doing org-cycle
 'org-cycle-inline-images-display nil

 'org-link-frame-setup '((vm . vm-visit-folder-other-frame)
			 (vm-imap . vm-visit-imap-folder-other-frame)
			 (gnus . org-gnus-no-new-news)
			 ;; open file links in another frame
			 (file . find-file-other-frame)
			 (wl . wl-other-frame)))
#+end_src

*** Heading subtree fold state cycling
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
(defun org-cycle-current-subtree (orig-fun &rest args)
  "Cycle fold state of current heading similar to org-shifttab, if org-cycle
is called with without C-u prefix.

Cycles through three states:
1. folded (content hidden)
2. children visible (direct subheadings shown)
3. subtree expanded (everything visible)"
  (interactive)
  (cond
   ((or (not (org-at-heading-p))
	(eq (prefix-numeric-value current-prefix-arg) 4)) (apply orig-fun args))
   (t (save-excursion
	(let ((beg (progn (org-back-to-heading t) (point)))
              ;; end manipulation needed to not screw up separator newlines
              (end (progn (org-end-of-subtree t t nil) (end-of-line) (point))))
	  (save-restriction
	    (narrow-to-region beg end)
	    (org-cycle-internal-global)))))))

(advice-add 'org-shifttab :around 'org-cycle-current-subtree)
;; (advice-remove 'org-shifttab 'org-cycle-current-subtree)


;; Remove the function which causes text to pop around when pressing tab.
;; This is annoying and confusing.
(remove-hook 'org-cycle-hook
             'org-optimize-window-after-visibility-change)
#+end_src

** Linking
*** General
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
;; links that use header text:
;; 1. break easily
;; 2. can't link to a header which is a link
;; therefore, use org ids for linking
(setq-mark-as-customized 'org-id-link-to-org-use-id t)
(define-key org-mode-map (kbd "C-c l") 'org-store-link)
(define-key org-mode-map (kbd "<f5>") 'org-id-get-create)
(define-key org-mode-map (kbd "<f9>") 'org-id-copy)
#+end_src

*** Custom :src source block header
<<<:src>>> is a custom header that I add manually to noref code blocks

#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
(defun org-babel-open-tangle-file ()
  "Opens the file specified by :tangle org :src header argument"
  (interactive)
  (let* ((info (org-babel-get-src-block-info))
         (tangle (cdr (assoc :tangle (nth 2 info))))
	 (src (cdr (assoc :src (nth 2 info)))))
    (if (not (equal tangle "no"))
	(find-file tangle)
      (when src (find-file src)))))
(define-key org-mode-map (kbd "C-c o") 'org-babel-open-tangle-file)
#+end_src

*** Noweb references
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el :noweb no
(defun swiper-noweb-ref-at-point (orig-fn &rest args)
  "Wraps swiper-thing-at-point to correctly search for org-mode noweb-refs"
  (interactive)
  (if-let* ((poly-org-mode? (and (bound-and-true-p polymode-mode)
				(eq (get-buffer-major-mode (pm-base-buffer))
				    'org-mode)))
	    (str (ivy-thing-at-point))
	    (noweb-ref (and (string-match "<<\\(.*?\\)>>" str)
			    (match-string 0 str))))
      (swiper noweb-ref)
    (apply orig-fn args)))

(advice-add 'swiper-thing-at-point :around 'swiper-noweb-ref-at-point)
#+end_src

** Editing
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
(setq-mark-as-customized
 'org-support-shift-select 'always
 'org-hide-emphasis-markers nil
 'org-edit-src-content-indentation 0
 'org-src-tab-acts-natively t

 ;; For languages with significant whitespace like Python:
 'org-src-preserve-indentation t
 )

;; Trying to fix weird org syntax problems. This just lets Org ignore < and >
;; characters as if they were regular words. This is necessary because in
;; Clojure I want to make functions with -> in the name and Org was always
;; insisting on pairing <>. This caused any other paren matching to stop
;; working. It sucked.
(defun my-angle-bracket-fix ()
  (modify-syntax-entry ?< "w")
  (modify-syntax-entry ?> "w"))
(add-hook 'org-mode-hook 'my-angle-bracket-fix)
(remove-hook 'org-mode-hook 'my-angle-bracket-fix)
#+end_src

** Code execution
*** Clojure namespace determination
I use file from custom :src or :tangle header to determine proper ns for eval

#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
(defun get-buffer-major-mode (buffer-name)
  (with-current-buffer buffer-name
    major-mode))

(defun poly-org-mode? ()
  (and (bound-and-true-p polymode-mode)
       (eq (get-buffer-major-mode (pm-base-buffer)) 'org-mode)))

(defun org-get-ns-file ()
  (let* ((block-info (org-babel-get-src-block-info 'light))
         (header-args (nth 2 block-info))
	 (tangle-value (alist-get :tangle header-args))
	 (tangle-file (and (not (string= tangle-value "no"))
			   tangle-value))
         (ns-file (or tangle-file
			  (alist-get :src header-args))))
    (if (or (eq nil ns-file) (not (file-exists-p ns-file)))
	nil
      ns-file)))

(defun org-clojure-block-get-ns (orig-fun &rest args)
  "Wrap org-cider-current-ns, to enable REPL execution straight from org-mode.
Searches for ns in :tangle or :src file, otherwise calls clojure-find-ns."
  (if-let ((_ (poly-org-mode?))
	   (ns-file (org-get-ns-file)))
      (with-temp-buffer
	    (insert-file-contents ns-file)
	    (goto-char (point-min))
	    (clojurec-mode)
	    (clojure-find-ns))
    (apply orig-fun args)))

(advice-add 'cider-current-ns :around 'org-clojure-block-get-ns)
;; (advice-remove 'cider-current-ns 'org-clojure-block-get-ns)
#+end_src

** Tangling
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
;; override broken fn, which deletes comments from clojure code
(load "~/.emacs.d/elisp/ob-clojure-fix.el")
(advice-add 'org-babel-expand-body:clojure
	    :override #'org-babel-expand-body:clojure_fixed)
#+end_src

** Todo and agenda
#+begin_src elisp :tangle ~/.emacs.d/elisp/org-mode.tangled.el
(setq-mark-as-customized 'org-agenda-restore-windows-after-quit t)

(define-key org-mode-map (kbd "C-c a") 'org-agenda)
#+end_src


* Many major mods in one buffer - polymode (poly-org)
#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/polymode.tangled.el")
#+end_src

** Flycheck fix
Prevents flycheck from confusing buffers and breaking down. See this [[https://github.com/polymode/poly-org/issues3/][issue]]

#+begin_src elisp :tangle ~/.emacs.d/elisp/polymode.tangled.el
(defun flycheck-buffer-not-indirect-p (&rest _)
  "Ensure that the current buffer is not indirect."
  (null (buffer-base-buffer)))

(advice-add 'flycheck-may-check-automatically
            :before-while #'flycheck-buffer-not-indirect-p)
#+end_src

** Background color fix
#+begin_src elisp :tangle ~/.emacs.d/elisp/polymode.tangled.el
;; polymode ignores background face config for both inner modes and org mode
(add-hook
 'polymode-init-inner-hook
 (lambda ()
   (oset pm/chunkmode adjust-face
	 '(:background "lavender"
           :extend t))))
#+end_src

** Source blocks display fix
#+begin_src elisp :tangle ~/.emacs.d/elisp/polymode.tangled.el
;; these supposed to prevent breaking display of source blocks
(setq-mark-as-customized
 'org-adapt-indentation nil
 'org-startup-indented nil)
#+end_src

** Fix for tangling inside source blocks, when noweb-refs are present
I spent 3 days trying to fix this [[https://github.com/polymode/poly-org/issues/53][issue]]. This hack avoids dealing with all the
difficult noweb expansion and its conflict with polymode.

#+begin_src elisp :tangle ~/.emacs.d/elisp/polymode.tangled.el
(defun pm--tangle-inside-source-block ()
  "Do tangling in a temporary copy of .org buffer, because
org-babel-expand-noweb-references explodes polymode. Don't save anything."
  (interactive)
  (cond
   ((not (poly-org-mode?)) nil)

   (t (let* ((inhibit-redisplay t)
             (inhibit-modification-hooks t)
	     (post-command-hook nil)
	     ;; we don't need overlay switching for this command
	     (pm--move-overlays (lambda ()))
	     (base-buf (pm-base-buffer))
	     (temp-file-name (concat (buffer-local-value
				      'buffer-file-name base-buf) "-temp")))
	(with-temp-buffer
	  (setq
	   buffer-file-name temp-file-name
           default-directory (buffer-local-value 'default-directory base-buf))
	  (insert-buffer-substring base-buf)
	  (org-mode)
	  (cl-letf (((symbol-function 'save-buffer) #'ignore)
		  ((symbol-function 'basic-save-buffer) #'ignore)
		  ((symbol-function 'save-some-buffers) #'ignore))
	    (org-babel-tangle))
	  (set-buffer-modified-p nil))))))

(define-key polymode-mode-map (kbd "C-c C-v C-t")
	    'pm--tangle-inside-source-block)
#+end_src

** Region random resize fix
#+begin_src elisp :tangle ~/.emacs.d/elisp/polymode.tangled.el
;; eldoc causes issues in my setup, sometimes marked region resizes randomly
;; tried eldoc-box to replace it, but it didn't work most of the time
;; all this is true for poly-org + clojurec + cider

(global-eldoc-mode -1)

(add-hook 'emacs-lisp-mode-hook (lambda () (eldoc-mode)))
#+end_src


* File management
#+begin_src elisp :tangle ./init.el
(load "~/.emacs.d/elisp/file-management.tangled.el")
#+end_src

** Permissions
#+begin_src elisp :tangle ~/.emacs.d/elisp/file-management.tangled.el
;; trying these setting to be able to edit files as root
(require 'tramp)
(setq tramp-default-method "sudoedit")

#+end_src

** Extensions
#+begin_src elisp :tangle ~/.emacs.d/elisp/file-management.tangled.el
;; mode that enables choosing program-to-open-with based on file extensions
(openwith-mode t)

(custom-set-variables
  ;; associate file extensions (regex) to program-to-open-with
  '(openwith-associations
    '(("\\.\\(doc\\|docx\\)\\'" "libreoffice.writer"
        (file))
      )))
#+end_src
